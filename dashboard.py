#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Ç-–±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Streamlit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sqlite3
from datetime import datetime, timedelta
import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ß–∞—Ç-–±–æ—Ç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    .stTabs [data-baseweb="tab"] {
        height: 3rem;
        padding-left: 1rem;
        padding-right: 1rem;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        conn = sqlite3.connect('instance/chatbot_logs.db')
        query = """
        SELECT id, user_id, session_id, timestamp, query_text, bot_response, 
               intent, resolved, rating, response_time, channel, language
        FROM interaction_log 
        ORDER BY timestamp DESC
        """
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        df['timestamp'] = pd.to_datetime(df['timestamp'], format='mixed', errors='coerce')
        df['date'] = df['timestamp'].dt.date
        df['hour'] = df['timestamp'].dt.hour
        
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def get_bot_response(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.post(
            'http://localhost:5000/chat',
            json={
                'message': message,
                'user_id': 'dashboard_user',
                'session_id': f'dashboard_session_{int(time.time())}',
                'channel': 'dashboard',
                'language': 'ru'
            },
            timeout=5
        )
        
        if response.status_code == 200:
            data = response.json()
            return data['response'], data.get('log_id')
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}", None
    except Exception as e:
        return f"‚ö†Ô∏è –ß–∞—Ç-–±–æ—Ç API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: py app.py", None

def rate_response(log_id, rating):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    try:
        response = requests.post(
            'http://localhost:5000/rate',
            json={'log_id': log_id, 'rating': rating},
            timeout=10
        )
        if response.status_code == 200:
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return False
    except requests.exceptions.Timeout:
        st.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏")
        return False
    except requests.exceptions.ConnectionError:
        st.error("‚ö†Ô∏è –ß–∞—Ç-–±–æ—Ç API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: py app.py")
        return False
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def chat_tab():
    """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞"""
    st.markdown('<h2 class="main-header">üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ß–∞—Ç-–±–æ—Ç–∞</h2>', unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    chat_container = st.container()
    with chat_container:
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.write(message["content"])
                if message["role"] == "assistant" and "log_id" in message:
                    # –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
                    log_id = message['log_id']
                    if log_id and log_id != "None":
                        st.write("**–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç:**")
                        cols = st.columns(5)
                        for i, col in enumerate(cols, 1):
                            with col:
                                if st.button(f"‚≠ê{i}", key=f"rate_{log_id}_{i}_{len(st.session_state.messages)}"):
                                    with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏..."):
                                        if rate_response(log_id, i):
                                            st.success(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {i} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                                            time.sleep(0.5)
                                            st.rerun()
                                        # –û—à–∏–±–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ rate_response
                    else:
                        st.info("‚ö†Ô∏è ID –∑–∞–ø–∏—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ü–µ–Ω–∫–∏")

def dashboard_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    st.markdown('<h2 class="main-header">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ß–∞—Ç-–±–æ—Ç–∞</h2>', unsafe_allow_html=True)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", help="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"):
            st.cache_data.clear()
            st.rerun()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = load_data()
    
    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∞—Ç-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
    latest_timestamp = df['timestamp'].max() if not df.empty else None
    if latest_timestamp:
        st.info(f"üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {latest_timestamp.strftime('%Y-%m-%d %H:%M:%S')} | –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if not df.empty:
        min_date = df['date'].min()
        max_date = df['date'].max()
        
        date_range = st.sidebar.date_input(
            "–ü–µ—Ä–∏–æ–¥",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date
        )
        
        if len(date_range) == 2:
            start_date, end_date = date_range
            df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º
    intents = st.sidebar.multiselect(
        "–ù–∞–º–µ—Ä–µ–Ω–∏—è",
        options=df['intent'].unique(),
        default=df['intent'].unique()
    )
    if intents:
        df = df[df['intent'].isin(intents)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–Ω–∞–ª–∞–º
    channels = st.sidebar.multiselect(
        "–ö–∞–Ω–∞–ª—ã",
        options=df['channel'].unique(),
        default=df['channel'].unique()
    )
    if channels:
        df = df[df['channel'].isin(channels)]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ KPI –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (KPI)")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
    full_df = load_data()
    total_interactions = len(full_df)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ë–î
    total_rated_interactions = len(full_df[full_df['rating'].notna()])
    total_avg_rating = full_df['rating'].mean() if not full_df.empty and full_df['rating'].notna().any() else 0
    total_resolution_rate = (full_df['resolved'].sum() / len(full_df) * 100) if len(full_df) > 0 else 0
    total_avg_response_time = full_df['response_time'].mean() if not full_df.empty else 0
    total_unique_users = full_df['user_id'].nunique() if not full_df.empty else 0
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    filtered_interactions = len(df)
    rated_interactions = len(df[df['rating'].notna()])
    avg_rating = df['rating'].mean() if not df.empty and df['rating'].notna().any() else 0
    resolution_rate = (df['resolved'].sum() / len(df) * 100) if len(df) > 0 else 0
    avg_response_time = df['response_time'].mean() if not df.empty else 0
    unique_users = df['user_id'].nunique() if not df.empty else 0
    
    # CSAT (Customer Satisfaction) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    positive_ratings = len(full_df[full_df['rating'] >= 4]) if not full_df.empty else 0
    csat_rate = (positive_ratings / total_rated_interactions * 100) if total_rated_interactions > 0 else 0
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "CSAT (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å)", 
            f"{total_avg_rating:.1f}/5",
            delta=f"{csat_rate:.1f}% –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö" if csat_rate > 0 else None
        )
    
    with col2:
        st.metric(
            "–£—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö", 
            f"{total_resolution_rate:.1f}%",
            delta=f"{full_df['resolved'].sum()}/{total_interactions}" if total_interactions > 0 else None
        )
    
    with col3:
        st.metric(
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", 
            f"{total_avg_response_time:.2f}—Å",
            delta="‚ö° –ë—ã—Å—Ç—Ä–æ" if total_avg_response_time < 1.0 else "üêå –ú–µ–¥–ª–µ–Ω–Ω–æ" if total_avg_response_time > 2.0 else None
        )
    
    with col4:
        st.metric(
            "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", 
            total_unique_users,
            delta=f"{total_interactions/total_unique_users:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if total_unique_users > 0 else None
        )
    
    with col5:
        st.metric(
            "–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π", 
            total_interactions,
            delta=f"{total_rated_interactions} –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö" if total_rated_interactions > 0 else None
        )
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìà –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã", "üéØ –ù–∞–º–µ—Ä–µ–Ω–∏—è", "‚≠ê –û—Ü–µ–Ω–∫–∏", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìã –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏"])
    
    with tab1:
        # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if not df.empty:
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
            daily_activity = df.groupby('date').agg({
                'id': 'count',
                'rating': 'mean',
                'resolved': 'mean',
                'response_time': 'mean'
            }).reset_index()
            daily_activity.columns = ['date', 'interactions', 'avg_rating', 'resolution_rate', 'avg_response_time']
            
            # –°–æ–∑–¥–∞–µ–º —Å—É–±–ø–ª–æ—Ç—ã
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º', '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–Ω—è–º', 
                              '–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –¥–Ω—è–º'),
                specs=[[{"secondary_y": False}, {"secondary_y": False}],
                     [{"secondary_y": False}, {"secondary_y": False}]]
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            fig.add_trace(
                go.Scatter(x=daily_activity['date'], y=daily_activity['interactions'], 
                          mode='lines+markers', name='–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', line=dict(color='#1f77b4')),
                row=1, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
            fig.add_trace(
                go.Scatter(x=daily_activity['date'], y=daily_activity['avg_rating'], 
                          mode='lines+markers', name='–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥', line=dict(color='#ff7f0e')),
                row=1, col=2
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–µ—à–µ–Ω–Ω—ã—Ö
            fig.add_trace(
                go.Scatter(x=daily_activity['date'], y=daily_activity['resolution_rate']*100, 
                          mode='lines+markers', name='% –†–µ—à–µ–Ω–Ω—ã—Ö', line=dict(color='#2ca02c')),
                row=2, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            fig.add_trace(
                go.Scatter(x=daily_activity['date'], y=daily_activity['avg_response_time'], 
                          mode='lines+markers', name='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å)', line=dict(color='#d62728')),
                row=2, col=2
            )
            
            fig.update_layout(height=600, showlegend=True, title_text="–î–∏–Ω–∞–º–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ –¥–Ω—è–º")
            st.plotly_chart(fig, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
            hourly_activity = df.groupby('hour').size().reset_index(name='count')
            
            fig_hourly = px.bar(
                hourly_activity, 
                x='hour', 
                y='count',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –¥–Ω—è",
                labels={'hour': '–ß–∞—Å –¥–Ω—è', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π'},
                color='count',
                color_continuous_scale='Blues'
            )
            fig_hourly.update_layout(xaxis_title="–ß–∞—Å –¥–Ω—è", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π")
            st.plotly_chart(fig_hourly, use_container_width=True)
    
    with tab2:
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞–ø—Ä–æ—Å–æ–≤
        if not df.empty:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º
            intent_analysis = df.groupby('intent').agg({
                'id': 'count',
                'rating': 'mean',
                'resolved': 'mean',
                'response_time': 'mean'
            }).reset_index()
            intent_analysis.columns = ['–ù–∞–º–µ—Ä–µ–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥', '–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö', '–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è']
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
            intent_analysis['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'] = pd.to_numeric(intent_analysis['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'], errors='coerce').fillna(0)
            intent_analysis['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'] = pd.to_numeric(intent_analysis['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'], errors='coerce').fillna(0) * 100
            intent_analysis['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'] = pd.to_numeric(intent_analysis['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'], errors='coerce').fillna(0)
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            fig_pie = px.pie(
                intent_analysis,
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                names='–ù–∞–º–µ—Ä–µ–Ω–∏–µ',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            st.plotly_chart(fig_pie, use_container_width=True)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞—á–µ—Å—Ç–≤–æ
            fig_combined = make_subplots(
                rows=1, cols=2,
                subplot_titles=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º', '–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º'),
                specs=[[{"secondary_y": False}, {"secondary_y": False}]]
            )
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            fig_combined.add_trace(
                go.Bar(x=intent_analysis['–ù–∞–º–µ—Ä–µ–Ω–∏–µ'], y=intent_analysis['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 
                      name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', marker_color='#1f77b4'),
                row=1, col=1
            )
            
            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            fig_combined.add_trace(
                go.Bar(x=intent_analysis['–ù–∞–º–µ—Ä–µ–Ω–∏–µ'], y=intent_analysis['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'], 
                      name='–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥', marker_color='#ff7f0e'),
                row=1, col=2
            )
            
            fig_combined.update_layout(height=400, showlegend=True, 
                                     title_text="–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞—á–µ—Å—Ç–≤–æ")
            fig_combined.update_xaxes(tickangle=45)
            st.plotly_chart(fig_combined, use_container_width=True)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º
            st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º")
            display_intent = intent_analysis.copy()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if pd.api.types.is_numeric_dtype(display_intent['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥']):
                display_intent['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'] = display_intent['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'].round(2)
            else:
                display_intent['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'] = display_intent['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'].astype(str)
                
            if pd.api.types.is_numeric_dtype(display_intent['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö']):
                display_intent['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'] = display_intent['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'].round(1)
            else:
                display_intent['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'] = display_intent['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'].astype(str)
                
            if pd.api.types.is_numeric_dtype(display_intent['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è']):
                display_intent['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'] = display_intent['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'].round(3)
            else:
                display_intent['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'] = display_intent['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'].astype(str)
            
            st.dataframe(
                display_intent,
                use_container_width=True,
                column_config={
                    "–ù–∞–º–µ—Ä–µ–Ω–∏–µ": "–ù–∞–º–µ—Ä–µ–Ω–∏–µ",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "–ó–∞–ø—Ä–æ—Å–æ–≤",
                    "–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥": "–°—Ä. —Ä–µ–π—Ç–∏–Ω–≥",
                    "–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö": "% –†–µ—à–µ–Ω–Ω—ã—Ö",
                    "–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è": "–í—Ä–µ–º—è (—Å)"
                }
            )
    
    with tab3:
        # –ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫
        if not df.empty and df['rating'].notna().any():
            rating_counts = df['rating'].value_counts().sort_index().reset_index()
            rating_counts.columns = ['–û—Ü–µ–Ω–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            
            fig = px.bar(
                rating_counts,
                x='–û—Ü–µ–Ω–∫–∞',
                y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫",
                color='–û—Ü–µ–Ω–∫–∞',
                color_continuous_scale='RdYlGn'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –æ—Ü–µ–Ω–æ–∫
            df_with_ratings = df[df['rating'].notna()].copy()
            if not df_with_ratings.empty:
                df_with_ratings['date'] = df_with_ratings['timestamp'].dt.date
                daily_ratings = df_with_ratings.groupby('date')['rating'].mean().reset_index()
                
                fig2 = px.line(
                    daily_ratings,
                    x='date',
                    y='rating',
                    title="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –¥–Ω—è–º",
                    labels={'date': '–î–∞—Ç–∞', 'rating': '–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞'}
                )
                fig2.update_layout(yaxis=dict(range=[1, 5]))
                st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    with tab4:
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        if not df.empty:
            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_analysis = df.groupby('user_id').agg({
                'id': 'count',
                'rating': 'mean',
                'resolved': 'mean',
                'response_time': 'mean'
            }).reset_index()
            user_analysis.columns = ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ó–∞–ø—Ä–æ—Å–æ–≤', '–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥', '–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö', '–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è']
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É
            user_analysis['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'] = pd.to_numeric(user_analysis['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'], errors='coerce').fillna(0)
            user_analysis['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'] = pd.to_numeric(user_analysis['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'], errors='coerce').fillna(0) * 100
            user_analysis['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'] = pd.to_numeric(user_analysis['–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è'], errors='coerce').fillna(0)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
            fig_requests = px.histogram(
                user_analysis,
                x='–ó–∞–ø—Ä–æ—Å–æ–≤',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤",
                labels={'–ó–∞–ø—Ä–æ—Å–æ–≤': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'},
                nbins=20
            )
            st.plotly_chart(fig_requests, use_container_width=True)
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            st.subheader("üëë –¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            top_users = user_analysis.nlargest(10, '–ó–∞–ø—Ä–æ—Å–æ–≤')
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if pd.api.types.is_numeric_dtype(top_users['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥']):
                top_users['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'] = top_users['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'].round(2)
            else:
                top_users['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'] = top_users['–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥'].astype(str)
                
            if pd.api.types.is_numeric_dtype(top_users['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö']):
                top_users['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'] = top_users['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'].round(1)
            else:
                top_users['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'] = top_users['–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö'].astype(str)
            
            st.dataframe(
                top_users,
                use_container_width=True,
                column_config={
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    "–ó–∞–ø—Ä–æ—Å–æ–≤": "–ó–∞–ø—Ä–æ—Å–æ–≤",
                    "–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥": "–°—Ä. —Ä–µ–π—Ç–∏–Ω–≥",
                    "–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö": "% –†–µ—à–µ–Ω–Ω—ã—Ö",
                    "–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è": "–í—Ä–µ–º—è (—Å)"
                }
            )
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            fig_corr = px.scatter(
                user_analysis,
                x='–ó–∞–ø—Ä–æ—Å–æ–≤',
                y='–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥',
                title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ vs —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                labels={'–ó–∞–ø—Ä–æ—Å–æ–≤': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤', '–°—Ä–µ–¥–Ω–∏–π_—Ä–µ–π—Ç–∏–Ω–≥': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'},
                color='–ü—Ä–æ—Ü–µ–Ω—Ç_—Ä–µ—à–µ–Ω–Ω—ã—Ö',
                color_continuous_scale='RdYlGn'
            )
            st.plotly_chart(fig_corr, use_container_width=True)
    
    with tab5:
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
        if not df.empty:
            # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            negative_cases = df[df['rating'] <= 2].copy() if df['rating'].notna().any() else pd.DataFrame()
            
            # –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            unknown_cases = df[df['intent'] == 'unknown'].copy()
            
            # –ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            unresolved_cases = df[df['resolved'] == False].copy()
            
            st.subheader("üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (‚â§2)", len(negative_cases))
            with col2:
                st.metric("–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", len(unknown_cases))
            with col3:
                st.metric("–ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", len(unresolved_cases))
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
            if not negative_cases.empty:
                st.subheader("üëé –°–ª—É—á–∞–∏ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏")
                display_negative = negative_cases[['timestamp', 'user_id', 'query_text', 'bot_response', 'rating', 'intent']].copy()
                display_negative['timestamp'] = display_negative['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
                st.dataframe(display_negative, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if not unknown_cases.empty:
                st.subheader("‚ùì –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
                display_unknown = unknown_cases[['timestamp', 'user_id', 'query_text', 'bot_response', 'rating']].copy()
                display_unknown['timestamp'] = display_unknown['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
                st.dataframe(display_unknown, use_container_width=True)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
            st.subheader("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                csv = df.to_csv(index=False)
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å CSV",
                    data=csv,
                    file_name=f"chatbot_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            st.subheader("üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
            display_df_all = df.head(50)[['timestamp', 'user_id', 'query_text', 'bot_response', 'intent', 'rating', 'resolved']].copy()
            display_df_all['timestamp'] = display_df_all['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
            
            st.dataframe(
                display_df_all,
                use_container_width=True,
                column_config={
                    "timestamp": "–í—Ä–µ–º—è",
                    "user_id": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    "query_text": "–ó–∞–ø—Ä–æ—Å",
                    "bot_response": "–û—Ç–≤–µ—Ç",
                    "intent": "–ù–∞–º–µ—Ä–µ–Ω–∏–µ",
                    "rating": "–û—Ü–µ–Ω–∫–∞",
                    "resolved": "–†–µ—à–µ–Ω"
                }
            )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">ü§ñ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –î–∞—à–±–æ—Ä–¥ –ß–∞—Ç-–±–æ—Ç–∞</h1>', unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    try:
        response = requests.get('http://localhost:5000/status', timeout=2)
        if response.status_code == 200:
            st.success("‚úÖ –ß–∞—Ç-–±–æ—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            st.warning("‚ö†Ô∏è –ß–∞—Ç-–±–æ—Ç API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        st.info("‚ÑπÔ∏è –ß–∞—Ç-–±–æ—Ç API –Ω–µ –∑–∞–ø—É—â–µ–Ω. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: py app.py")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
    
    with tab1:
        chat_tab()
    
    with tab2:
        dashboard_tab()
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞ (–≤–Ω–µ –≤–∫–ª–∞–¥–æ–∫)
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'messages' not in st.session_state:
            st.session_state.messages = []
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
        with st.spinner("–ë–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç..."):
            response, log_id = get_bot_response(prompt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        bot_message = {"role": "assistant", "content": response}
        if log_id:
            bot_message["log_id"] = log_id
        st.session_state.messages.append(bot_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.rerun()

if __name__ == "__main__":
    main()

