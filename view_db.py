#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
"""

import sqlite3
import pandas as pd
from datetime import datetime

def show_all_records():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        conn = sqlite3.connect('instance/chatbot_logs.db')
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        df = pd.read_sql_query('''
            SELECT id, user_id, session_id, timestamp, query_text, 
                   bot_response, intent, resolved, rating, response_time, 
                   channel, language
            FROM interaction_log 
            ORDER BY id
        ''', conn)
        
        conn.close()
        
        if df.empty:
            print("üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return df
        
        print("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print("=" * 120)
        print(f"{'ID':<3} | {'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':<12} | {'–í—Ä–µ–º—è':<20} | {'–ó–∞–ø—Ä–æ—Å':<30} | {'–û—Ç–≤–µ—Ç':<30} | {'–†–µ–π—Ç–∏–Ω–≥':<7}")
        print("-" * 120)
        
        for _, row in df.iterrows():
            query_short = row['query_text'][:28] + "..." if len(row['query_text']) > 30 else row['query_text']
            response_short = row['bot_response'][:28] + "..." if len(row['bot_response']) > 30 else row['bot_response']
            rating_str = str(row['rating']) if pd.notna(row['rating']) else "–ù–µ—Ç"
            
            print(f"{row['id']:<3} | {row['user_id']:<12} | {row['timestamp']:<20} | {query_short:<30} | {response_short:<30} | {rating_str:<7}")
        
        print("=" * 120)
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return pd.DataFrame()

def delete_record_by_id(record_id):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID"""
    try:
        conn = sqlite3.connect('instance/chatbot_logs.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
        cursor.execute('SELECT id FROM interaction_log WHERE id = ?', (record_id,))
        if not cursor.fetchone():
            print(f"‚ùå –ó–∞–ø–∏—Å—å —Å ID {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            conn.close()
            return False
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute('DELETE FROM interaction_log WHERE id = ?', (record_id,))
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å ID {record_id} —É–¥–∞–ª–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return False

def delete_records_by_ids(record_ids):
    """–£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ ID"""
    try:
        conn = sqlite3.connect('instance/chatbot_logs.db')
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏
        placeholders = ','.join('?' * len(record_ids))
        cursor.execute(f'DELETE FROM interaction_log WHERE id IN ({placeholders})', record_ids)
        deleted_count = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return False

def delete_all_records():
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
    try:
        conn = sqlite3.connect('instance/chatbot_logs.db')
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM interaction_log')
        deleted_count = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return False

def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("üóÑÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    while True:
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("1. show - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
        print("2. delete <ID> - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID")
        print("3. delete_many <ID1,ID2,ID3> - —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π")
        print("4. delete_all - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
        print("5. quit - –≤—ã–π—Ç–∏")
        
        command = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
        
        if command == "quit" or command == "q":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif command == "show":
            show_all_records()
        elif command.startswith("delete "):
            try:
                record_id = int(command.split()[1])
                delete_record_by_id(record_id)
            except (ValueError, IndexError):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: delete <ID>")
        elif command.startswith("delete_many "):
            try:
                ids_str = command.split()[1]
                record_ids = [int(x.strip()) for x in ids_str.split(',')]
                delete_records_by_ids(record_ids)
            except (ValueError, IndexError):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: delete_many <ID1,ID2,ID3>")
        elif command == "delete_all":
            confirm = input("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏? (yes/no): ")
            if confirm.lower() in ['yes', 'y', '–¥–∞']:
                delete_all_records()
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "show":
            show_all_records()
        elif command == "delete" and len(sys.argv) > 2:
            try:
                record_id = int(sys.argv[2])
                delete_record_by_id(record_id)
            except ValueError:
                print("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        elif command == "delete_all":
            confirm = input("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏? (yes/no): ")
            if confirm.lower() in ['yes', 'y', '–¥–∞']:
                delete_all_records()
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_mode()

if __name__ == "__main__":
    main()
