from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import uuid
import time

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///chatbot_logs.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = SQLAlchemy(app)

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
class InteractionLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String(100), nullable=False, index=True)
    session_id = db.Column(db.String(100), nullable=False, index=True)
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    query_text = db.Column(db.Text, nullable=False)
    bot_response = db.Column(db.Text, nullable=False)
    intent = db.Column(db.String(50), nullable=True)  # –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    resolved = db.Column(db.Boolean, default=True)  # –ë—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–µ—à–µ–Ω –±–æ—Ç–æ–º
    rating = db.Column(db.Integer, nullable=True)  # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-5)
    response_time = db.Column(db.Float, nullable=True)  # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    channel = db.Column(db.String(50), default='web')  # –ö–∞–Ω–∞–ª (web, telegram, etc.)
    language = db.Column(db.String(10), default='ru')  # –Ø–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞
    
    def to_dict(self):
        return {
            'id': self.id,
            'user_id': self.user_id,
            'session_id': self.session_id,
            'timestamp': self.timestamp.isoformat(),
            'query_text': self.query_text,
            'bot_response': self.bot_response,
            'intent': self.intent,
            'resolved': self.resolved,
            'rating': self.rating,
            'response_time': self.response_time,
            'channel': self.channel,
            'language': self.language
        }

def generate_bot_reply(user_text):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (–æ—Ç–≤–µ—Ç, –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, —Ä–µ—à–µ–Ω_–ª–∏_–∑–∞–ø—Ä–æ—Å)
    """
    import time
    
    text = user_text.lower()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if any(greet in text for greet in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "hi", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ"]):
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", "greeting", True
    
    # –í—Ä–µ–º—è
    elif "–≤—Ä–µ–º—è" in text or "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å" in text:
        time.sleep(0.2)  # –ß—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è "—Å–ª–æ–∂–Ω–æ–≥–æ" –∑–∞–ø—Ä–æ—Å–∞
        now = datetime.now().strftime("%H:%M")
        return f"–°–µ–π—á–∞—Å {now}.", "time_query", True
    
    # –î–∞—Ç–∞
    elif "–¥–∞—Ç–∞" in text or "–∫–∞–∫–æ–µ —á–∏—Å–ª–æ" in text or "–∫–∞–∫–æ–π –¥–µ–Ω—å" in text or "—á–∏—Å–ª–æ" in text:
        time.sleep(0.2)  # –ß—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è "—Å–ª–æ–∂–Ω–æ–≥–æ" –∑–∞–ø—Ä–æ—Å–∞
        now = datetime.now().strftime("%d.%m.%Y")
        return f"–°–µ–≥–æ–¥–Ω—è {now}.", "date_query", True
    
    # –ü–æ–≥–æ–¥–∞
    elif "–ø–æ–≥–æ–¥–∞" in text or "–¥–æ–∂–¥—å" in text or "—Å–æ–ª–Ω—Ü–µ" in text:
        time.sleep(0.3)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è "—Å–ª–æ–∂–Ω–æ–≥–æ" –∞–Ω–∞–ª–∏–∑–∞
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.", "weather_query", False
    
    # –ü–æ–º–æ—â—å
    elif any(help_word in text for help_word in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "—Ñ—É–Ω–∫—Ü–∏–∏"]):
        time.sleep(0.15)  # –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return "–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ!", "help_request", True
    
    # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    elif any(thanks in text for thanks in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks", "thank you"]):
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!", "thanks", True
    
    # –ü—Ä–æ—â–∞–Ω–∏–µ
    elif any(bye in text for bye in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "bye", "goodbye", "—É–≤–∏–¥–∏–º—Å—è"]):
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!", "goodbye", True
    
    # –í–æ–ø—Ä–æ—Å—ã –æ –±–æ—Ç–µ
    elif any(bot_word in text for bot_word in ["–∫—Ç–æ —Ç—ã", "—á—Ç–æ —Ç—ã", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "–∏–º—è"]):
        time.sleep(0.15)  # –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return "–Ø –ø—Ä–æ—Å—Ç–æ–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç!", "bot_info", True
    
    # –í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
    elif "–≤–æ–∑—Ä–∞—Å—Ç" in text or "—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ" in text:
        time.sleep(0.15)  # –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞
        return "–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–æ–¥–∏–ª—Å—è –≤ —ç—Ç–æ–º –∫–æ–¥–µ! üòä", "bot_info", True
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else:
        time.sleep(0.3)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è "—Å–ª–æ–∂–Ω–æ–≥–æ" –∞–Ω–∞–ª–∏–∑–∞
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ –≤—Ä–µ–º–µ–Ω–∏, –¥–∞—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å!", "unknown", False

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.route("/")
def home():
    return render_template('index.html')


# –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è
@app.route("/chat", methods=["POST"])
def chat():
    start_time = time.time()
    
    try:
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message' –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400
        
        user_input = data['message']
        if not user_input.strip():
            return jsonify({"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ session_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        user_id = data.get('user_id', 'anonymous')
        session_id = data.get('session_id', str(uuid.uuid4()))
        channel = data.get('channel', 'web')
        language = data.get('language', 'ru')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        bot_reply, intent, resolved = generate_bot_reply(user_input)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞)
        response_time = time.time() - start_time
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ
        log_entry = InteractionLog(
            user_id=user_id,
            session_id=session_id,
            query_text=user_input,
            bot_response=bot_reply,
            intent=intent,
            resolved=resolved,
            response_time=response_time,
            channel=channel,
            language=language
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.session.add(log_entry)
        db.session.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        return jsonify({
            "response": bot_reply,
            "log_id": log_entry.id,
            "intent": intent,
            "resolved": resolved
        })
    
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
@app.route("/rate", methods=["POST"])
def rate_response():
    try:
        data = request.get_json()
        if not data or 'log_id' not in data or 'rating' not in data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è 'log_id' –∏–ª–∏ 'rating'"}), 400
        
        log_id = data['log_id']
        rating = data['rating']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if not isinstance(rating, int) or rating < 1 or rating > 5:
            return jsonify({"error": "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5"}), 400
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–µ
        log_entry = db.session.get(InteractionLog, log_id)
        if not log_entry:
            return jsonify({"error": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
        log_entry.rating = rating
        db.session.commit()
        
        return jsonify({"message": "–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "log_id": log_id, "rating": rating})
    
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.route("/stats")
def get_stats():
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        total_interactions = InteractionLog.query.count()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        rated_interactions = InteractionLog.query.filter(InteractionLog.rating.isnot(None)).count()
        
        # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
        avg_rating = db.session.query(db.func.avg(InteractionLog.rating)).filter(
            InteractionLog.rating.isnot(None)
        ).scalar() or 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        resolved_count = InteractionLog.query.filter(InteractionLog.resolved == True).count()
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º
        intent_stats = db.session.query(
            InteractionLog.intent,
            db.func.count(InteractionLog.id)
        ).group_by(InteractionLog.intent).all()
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        avg_response_time = db.session.query(db.func.avg(InteractionLog.response_time)).scalar() or 0
        
        return jsonify({
            "total_interactions": total_interactions,
            "rated_interactions": rated_interactions,
            "average_rating": round(avg_rating, 2),
            "resolved_count": resolved_count,
            "resolution_rate": round((resolved_count / total_interactions * 100) if total_interactions > 0 else 0, 2),
            "average_response_time": round(avg_response_time, 3),
            "intent_distribution": dict(intent_stats)
        })
    
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
@app.route("/logs")
def get_logs():
    try:
        page = request.args.get('page', 1, type=int)
        per_page = request.args.get('per_page', 50, type=int)
        user_id = request.args.get('user_id')
        
        query = InteractionLog.query
        
        if user_id:
            query = query.filter(InteractionLog.user_id == user_id)
        
        logs = query.order_by(InteractionLog.timestamp.desc()).paginate(
            page=page, per_page=per_page, error_out=False
        )
        
        return jsonify({
            "logs": [log.to_dict() for log in logs.items],
            "total": logs.total,
            "pages": logs.pages,
            "current_page": page,
            "per_page": per_page
        })
    
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@app.route("/status")
def status():
    return jsonify({
        "status": "online",
        "bot_name": "Simple ChatBot",
        "version": "2.0",
        "features": ["greeting", "time", "date", "basic_qa", "logging", "rating"]
    })


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        db.create_all()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    app.run(debug=True, host='0.0.0.0', port=5000)
